{"version":3,"sources":["Components/DrummerCard/index.js","App.js","serviceWorker.js","index.js"],"names":["DrummerCard","props","react_default","a","createElement","key","id","className","src","image","alt","onClick","handleClick","App","state","drummers","score","highScore","checkClick","console","log","_this","setState","drummerClickedId","length","forEach","checkClickId","copy","concat","Object","toConsumableArray","shuffle","temp","slice","i","j","Math","floor","random","_ref","this","_this2","map","drummer","Components_DrummerCard","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+vBAWeA,MARf,SAAqBC,GACnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,IACdJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aAAaC,IAAKP,EAAMQ,MAAOC,IAAKT,EAAMQ,MAAOE,QAAS,kBAAMV,EAAMW,YAAYX,EAAMK,SC2F9FO,6MA3FbC,MAAQ,CACNC,SAAUA,EACVC,MAAO,EACPC,UAAW,EACXC,WAAY,MAGdN,YAAc,SAAAN,GACZa,QAAQC,IAAId,GACZe,EAAKC,SACH,CACEN,MAAOK,EAAKP,MAAME,MAAQ,GAC1B,WACAK,EAAKH,WAAWZ,QAQtBY,WAAa,SAAAK,GAGX,GADAJ,QAAQC,IAAIC,EAAKP,MAAMI,YACW,GAA9BG,EAAKP,MAAMI,WAAWM,OAAW,CAEnCH,EAAKC,SAAS,CAACJ,WAAY,CAACK,KAC5BJ,QAAQC,IAAI,eACZD,QAAQC,IAAIC,EAAKP,MAAMI,YAIzBG,EAAKP,MAAMI,WAAWO,QAAQ,SAAAC,GAO5B,GAJAP,QAAQC,IAAI,gBAAgBM,GAC5BP,QAAQC,IAAI,kBAAmBG,GAC/BJ,QAAQC,IAAI,aAERM,GAAgBH,EAClBJ,QAAQC,IAAI,uBACP,CAEL,IAAOO,EAAI,GAAAC,OAAAC,OAAAC,EAAA,EAAAD,CAAOR,EAAKP,MAAMI,YAAlB,CAA8BK,IACzCF,EAAKC,SAAS,CAACJ,WAAYS,OAI/BR,QAAQC,IAAIC,EAAKP,MAAMI,YACvBG,EAAKU,aAYPA,QAAU,WAGR,IAFA,IAAIC,EAAOX,EAAKP,MAAMC,SAASkB,QAEtBC,EAAIF,EAAKR,OAAS,EAAGU,EAAI,EAAGA,IAAK,CACxC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADAK,EAEnB,CAACP,EAAKG,GAAIH,EAAKE,IAAnCF,EAAKE,GAFkCK,EAAA,GAE9BP,EAAKG,GAFyBI,EAAA,GAI1ClB,EAAKC,SAAS,CAAEP,SAAUiB,qFAftBQ,KAAK1B,MAAME,MAAQwB,KAAK1B,MAAMG,WAChCuB,KAAKlB,SAAS,CACZL,UAAWuB,KAAK1B,MAAME,yCAgBnB,IAAAyB,EAAAD,KACP,OACEtC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,oBAAYoC,KAAK1B,MAAME,OACvBd,EAAAC,EAAAC,cAAA,yBAAiBoC,KAAK1B,MAAMG,WAC5Bf,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACdiC,KAAK1B,MAAMC,SAAS2B,IAAI,SAAAC,GAAO,OAC9BzC,EAAAC,EAAAC,cAACwC,EAAD,CACEhC,YAAa6B,EAAK7B,YAClBN,GAAIqC,EAAQrC,GACZD,IAAKsC,EAAQrC,GACbG,MAAOkC,EAAQlC,kBApFToC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a8ac1283.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction DrummerCard(props) {\n  return (\n    <div key={props.id}>\n      <img className=\"drummerImg\" src={props.image} alt={props.image} onClick={() => props.handleClick(props.id)}/>\n    </div>\n  );\n}\n\nexport default DrummerCard;\n","import React from \"react\";\nimport \"./App.css\";\nimport drummers from \"./drummers.json\";\nimport DrummerCard from \"./Components/DrummerCard\";\n\nclass App extends React.Component {\n  state = {\n    drummers: drummers,\n    score: 0,\n    highScore: 0,\n    checkClick: []\n  };\n\n  handleClick = id => {\n    console.log(id);\n    this.setState(\n      {\n        score: this.state.score + 1\n      },() =>{\n        this.checkClick(id);\n      }\n      \n    );\n    \n     \n  };\n  //if id is clicked again then it set a high score and restarts the game reset checkclicked array to empty \n  checkClick = drummerClickedId => {\n    //if this.state.checkClick is empty then push this.state.drummerClickedId to the array\n    console.log(this.state.checkClick);\n    if (this.state.checkClick.length==0) {\n      let copy = []\n      this.setState({checkClick: [drummerClickedId]});\n      console.log('first click')\n      console.log(this.state.checkClick)\n    }\n    //if id is clicked again then it set a high score and restarts the game reset checkclicked array to empty\n\n    this.state.checkClick.forEach(checkClickId => {\n      // checkClickId = id\n      // if checkClickId exists in the array then do nothing, else if checkClickId exists set high score, restart game, and set the state of checkclicked to an empty array\n      console.log('checkClicked ',checkClickId)\n      console.log('drummerClicked ', drummerClickedId)\n      console.log('---------')\n  \n      if (checkClickId == drummerClickedId) {\n        console.log('already clicked')\n      } else {\n        // then add the drummerClickedId to the checkClick array to be checked\n        const  copy = [...this.state.checkClick, drummerClickedId];\n        this.setState({checkClick: copy});\n      }\n     \n    });\n    console.log(this.state.checkClick);\n    this.shuffle ()\n  };\n\n  checkHighScore() {\n    if (this.state.score > this.state.highScore) {\n      this.setState({\n        highScore: this.state.score\n      });\n    }\n  }\n  //shuffle drummers array when the id is clicked\n\n  shuffle = () => {\n    let temp = this.state.drummers.slice();\n\n    for (let i = temp.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [temp[i], temp[j]] = [temp[j], temp[i]];\n    }\n    this.setState({ drummers: temp });\n  };\n\n  render() {\n    return (\n      <div className=\"card\">\n        <h1>Drummer Click</h1>\n        <h2>Score: {this.state.score}</h2>\n        <h2>High Score: {this.state.highScore}</h2>\n        <div className=\"img-container\" />\n        {this.state.drummers.map(drummer => (\n          <DrummerCard\n            handleClick={this.handleClick}\n            id={drummer.id}\n            key={drummer.id}\n            image={drummer.image}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}